Τα **hash tables** χρησιμοποιούνται κυρίως για την υλοποίηση data structures
όπως maps και sets. Τα maps χρησιμοποιύνται συνήθως για γρήγορη εύρεση και αναζήτηση
δεδομένων. Αποθηκεύουν τα δεδομένα υπό μορφής _κλειδιου_ και _τιμής_ (key value pair)
όπου κάθε κλειδί είναι μοναδικό. Κάθε κλειδί (key) δείχνει (maps) σε μία τιμή (value),
εξού λοιπόν και το όνομα `maps`. Για παράδειγμα:

```
key   : Value
--------------
Panos :  1
Peter :  2
```

Διάφορες γλώσσες προγραμματισμού χρησιμοποιούν maps ή hash maps στις standard βιβλιοθήκες
τους, όπου ενδέχεται να υπάρχουν μικρές διαφορές.

Όσον αφορά τα σύνολα (seta) χρησιμοποιούνται κυρίως για συσχετισμούς μεταξύ των δεδομένων,
όπως για παράδειγμα η ένωση (union) δύο συνόλων, τα κοινά στοιχεία (intersection), οι διαφορές difference και τα υποσύνολα αυτών σε υπο-κατηγορίες.

Για όλα αυτά λοιπόν χρησιμοποιούμε κυρίως **hash tables**. Γλώσσες όπως **C++** και
**Java** διαθέτουν _hash tables_ σαν μέρος της standard library τους, ενώ άλλες γλώσσες
όπως η Python χρησιμοποιούν _dictionaries_ για την υλοποίησή τους. Η Go, υλοποιεί τα
hash tables χρησιμοποιώντας `maps`.

## Τι είναι ένα hash table

Ένα hash table είναι μία συλλογή (χωρίς κατάταξη ή σωστή σειρά) από _key-value pairs_, όπου
το κάθε _key_ είναι μοναδικό. Τα hash tables προσφέρουν έναν συνδυασμό από πολύ αποδοτικές
διαδικασίες, όπως **lookup**, **insert** και **delete**.

* ένα `lookup` σε μία `unsorted array` παίρνει τον μεγαλύτερο γραμμικό χρόνο
* σε μία `sorted array`, χρησιμοποιώντας `binary search` το lookup είναι πολύ πιο γρήγορο, αλλά αν έχουμε `insertions` τότε γίνεται μη αποδοτικό.
* Σε μία `linked list` ένα `insertion` είναι αποδοτικό, αλλά τα `lookup` παίρνουν γραμμικό χρόνο.

